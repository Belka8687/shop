{"ast":null,"code":"import * as R from 'ramda';\nimport request from 'superagent';\nimport phones from '../api/mockPhones';\nimport categories from '../api/mockCategories';\nexport const fetchPhones = async () => {\n  const _ref = await request.get('http://www.mocky.io/v2/5918bc6b120000701040dbec'),\n        body = _ref.body;\n\n  return body.phones;\n};\nexport const loadMorePhones = async ({\n  offset\n}) => {\n  return new Promise((resolve, reject) => {\n    resolve(phones); // reject('error')\n  });\n};\nexport const fetchPhoneById = async id => {\n  return new Promise((resolve, reject) => {\n    const phone = R.find(R.propEq('id', id), phones);\n    resolve(phone);\n  });\n};\nexport const fetchCategories = async () => {\n  return new Promise((resolve, reject) => {\n    resolve(categories);\n  });\n};","map":{"version":3,"sources":["/home/olga/my-app/src/node_modules/actions/api/index.js"],"names":["R","request","phones","categories","fetchPhones","get","body","loadMorePhones","offset","Promise","resolve","reject","fetchPhoneById","id","phone","find","propEq","fetchCategories"],"mappings":"AAAA,OAAO,KAAKA,CAAZ,MAAmB,OAAnB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA,OAAO,MAAMC,WAAW,GAAG,YAAY;AAAA,eACtB,MAAMH,OAAO,CAACI,GAAR,CACnB,iDADmB,CADgB;AAAA,QAC9BC,IAD8B,QAC9BA,IAD8B;;AAItC,SAAOA,IAAI,CAACJ,MAAZ;AACA,CALM;AAOP,OAAO,MAAMK,cAAc,GAAG,OAAO;AAACC,EAAAA;AAAD,CAAP,KAAoB;AACjD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnCD,IAAAA,OAAO,CAACR,MAAD,CAAP,CADmC,CAEnC;AACJ,GAHM,CAAP;AAIA,CALM;AAOP,OAAO,MAAMU,cAAc,GAAG,MAAOC,EAAP,IAAc;AAC3C,SAAO,IAAIJ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,UAAMG,KAAK,GAAEd,CAAC,CAACe,IAAF,CAAOf,CAAC,CAACgB,MAAF,CAAS,IAAT,EAAeH,EAAf,CAAP,EAA2BX,MAA3B,CAAb;AACAQ,IAAAA,OAAO,CAACI,KAAD,CAAP;AACA,GAHM,CAAP;AAIA,CALM;AAOP,OAAO,MAAMG,eAAe,GAAG,YAAY;AACzC,SAAO,IAAIR,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCD,IAAAA,OAAO,CAACP,UAAD,CAAP;AACH,GAFM,CAAP;AAGD,CAJM","sourcesContent":["import * as R from 'ramda'\nimport request from 'superagent'\n\nimport phones from '../api/mockPhones'\nimport categories from '../api/mockCategories'\n\nexport const fetchPhones = async () => {\n  const {body} = await request.get(\n    'http://www.mocky.io/v2/5918bc6b120000701040dbec'\n  )\n\treturn body.phones\n}\n\nexport const loadMorePhones = async ({offset}) => {\n\treturn new Promise((resolve, reject) => {\n      resolve(phones)\n      // reject('error')\n\t})\n}\n\nexport const fetchPhoneById = async (id) => {\n\treturn new Promise((resolve, reject) => {\n\t\tconst phone= R.find(R.propEq('id', id), phones)\n\t\tresolve(phone)\n\t})\n}\n\nexport const fetchCategories = async () => {\n  return new Promise((resolve, reject) => {\n      resolve(categories)\n  })\n}"]},"metadata":{},"sourceType":"module"}
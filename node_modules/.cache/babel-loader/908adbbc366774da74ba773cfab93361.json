{"ast":null,"code":"import * as R from 'ramda';\nexport const getPhoneById = (state, id) => R.prop(id, state.phones);\nexport const getActiveCategoryId = ownProps => R.path(['match', 'params', 'id'], ownProps);\nexport const getPhones = (state, ownProps) => {\n  const activeCategoryId = getActiveCategoryId(ownProps);\n\n  const applySearch = item => R.contains(state.phonesPage.search, R.prop('name', item));\n\n  const applyCategory = item => R.equals(activeCategoryId, R.prop('categoryId', item));\n\n  const phones = R.compose(R.filter(applySearch), R.when(R.always(activeCategoryId), R.filter(applyCategory)), R.map(id => getPhoneById(state, id)))(state.phonesPage.ids);\n  return phones;\n};\nexport const getRenderedPhonesLength = state => R.length(state.phonesPage.ids);\nexport const getTotalBasketCount = state => R.length(state.basket);\nexport const getTotalBasketPrice = state => {\n  const totalPrice = R.compose(R.sum, R.pluck(\"price\"), R.map(id => getPhoneById(state, id)))(state.basket);\n  return totalPrice;\n};\nexport const getCategories = state => R.values(state.categories);\nexport const getBasketPhonesWithCount = state => {\n  const phoneCount = id => R.compose(R.length, R.filter(basketId => R.equals(id, basketId)))(state.basket);\n\n  const phoneWithCount = phone => R.assoc('count', phoneCount(phone.id), phone);\n\n  const uniqueIds = R.uniq(state.basket);\n  const phones = R.compose(R.map(phoneWithCount), R.map(id => getPhoneById(state, id)))(uniqueIds);\n  return phones;\n};","map":{"version":3,"sources":["/home/olga/my-app/src/node_modules/selectors.js"],"names":["R","getPhoneById","state","id","prop","phones","getActiveCategoryId","ownProps","path","getPhones","activeCategoryId","applySearch","item","contains","phonesPage","search","applyCategory","equals","compose","filter","when","always","map","ids","getRenderedPhonesLength","length","getTotalBasketCount","basket","getTotalBasketPrice","totalPrice","sum","pluck","getCategories","values","categories","getBasketPhonesWithCount","phoneCount","basketId","phoneWithCount","phone","assoc","uniqueIds","uniq"],"mappings":"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","sourcesContent":["import * as R from 'ramda'\n\nexport const getPhoneById = (state, id) => R.prop(id, state.phones)\n\nexport const getActiveCategoryId = ownProps => R.path(['match', 'params', 'id'], ownProps)\n\nexport const getPhones = (state, ownProps) => {\n  const activeCategoryId = getActiveCategoryId(ownProps)\n  const applySearch = item => R.contains(\n    state.phonesPage.search,\n    R.prop('name', item)\n  )\n  const applyCategory = item => R.equals(\n    activeCategoryId,\n    R.prop('categoryId', item)\n  )\n  const phones = R.compose(\n    R.filter(applySearch),\n    R.when(R.always(activeCategoryId), R.filter(applyCategory)),\n    R.map(id => getPhoneById(state, id))\n  )(state.phonesPage.ids)\n  \n\treturn phones\n}\n\nexport const getRenderedPhonesLength = state => R.length(state.phonesPage.ids)\n\nexport const getTotalBasketCount = state => R.length(state.basket)\n\nexport const getTotalBasketPrice = state => {\n  const totalPrice = R.compose(\n    R.sum,\n    R.pluck(\"price\"),\n    R.map(id => getPhoneById(state, id))\n    )(state.basket)\n\n    return totalPrice\n}\n\nexport const getCategories = state => R.values(state.categories)\n\nexport const getBasketPhonesWithCount = state => {\n  const phoneCount = id => R.compose(\n    R.length,\n    R.filter(basketId => R.equals(id, basketId))\n  )(state.basket)\n  const phoneWithCount = phone => R.assoc('count', phoneCount(phone.id), phone)\n  const uniqueIds = R.uniq(state.basket)\n  const phones = R.compose(\n    R.map(phoneWithCount),\n    R.map(id => getPhoneById(state, id))\n    )(uniqueIds)\n\n    return phones\n}"]},"metadata":{},"sourceType":"module"}